# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from baxter_core_msgs/Parameter.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import baxter_core_msgs.msg

class Parameter(genpy.Message):
  _md5sum = "fd58ac513e2431b7209941d4535383cb"
  _type = "baxter_core_msgs/Parameter"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string type
bool is_symbol
FloatArray[] lArmPose
FloatArray[] rArmPose
FloatArray[] lGripper
FloatArray[] rGripper
FloatArray[] pose
FloatArray[] value
FloatArray[] rotation

================================================================================
MSG: baxter_core_msgs/FloatArray
float64[] data"""
  __slots__ = ['type','is_symbol','lArmPose','rArmPose','lGripper','rGripper','pose','value','rotation']
  _slot_types = ['string','bool','baxter_core_msgs/FloatArray[]','baxter_core_msgs/FloatArray[]','baxter_core_msgs/FloatArray[]','baxter_core_msgs/FloatArray[]','baxter_core_msgs/FloatArray[]','baxter_core_msgs/FloatArray[]','baxter_core_msgs/FloatArray[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,is_symbol,lArmPose,rArmPose,lGripper,rGripper,pose,value,rotation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Parameter, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = ''
      if self.is_symbol is None:
        self.is_symbol = False
      if self.lArmPose is None:
        self.lArmPose = []
      if self.rArmPose is None:
        self.rArmPose = []
      if self.lGripper is None:
        self.lGripper = []
      if self.rGripper is None:
        self.rGripper = []
      if self.pose is None:
        self.pose = []
      if self.value is None:
        self.value = []
      if self.rotation is None:
        self.rotation = []
    else:
      self.type = ''
      self.is_symbol = False
      self.lArmPose = []
      self.rArmPose = []
      self.lGripper = []
      self.rGripper = []
      self.pose = []
      self.value = []
      self.rotation = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.is_symbol))
      length = len(self.lArmPose)
      buff.write(_struct_I.pack(length))
      for val1 in self.lArmPose:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.rArmPose)
      buff.write(_struct_I.pack(length))
      for val1 in self.rArmPose:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.lGripper)
      buff.write(_struct_I.pack(length))
      for val1 in self.lGripper:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.rGripper)
      buff.write(_struct_I.pack(length))
      for val1 in self.rGripper:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.pose)
      buff.write(_struct_I.pack(length))
      for val1 in self.pose:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.value)
      buff.write(_struct_I.pack(length))
      for val1 in self.value:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.rotation)
      buff.write(_struct_I.pack(length))
      for val1 in self.rotation:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.lArmPose is None:
        self.lArmPose = None
      if self.rArmPose is None:
        self.rArmPose = None
      if self.lGripper is None:
        self.lGripper = None
      if self.rGripper is None:
        self.rGripper = None
      if self.pose is None:
        self.pose = None
      if self.value is None:
        self.value = None
      if self.rotation is None:
        self.rotation = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      start = end
      end += 1
      (self.is_symbol,) = _struct_B.unpack(str[start:end])
      self.is_symbol = bool(self.is_symbol)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lArmPose = []
      for i in range(0, length):
        val1 = baxter_core_msgs.msg.FloatArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.lArmPose.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rArmPose = []
      for i in range(0, length):
        val1 = baxter_core_msgs.msg.FloatArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.rArmPose.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lGripper = []
      for i in range(0, length):
        val1 = baxter_core_msgs.msg.FloatArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.lGripper.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rGripper = []
      for i in range(0, length):
        val1 = baxter_core_msgs.msg.FloatArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.rGripper.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pose = []
      for i in range(0, length):
        val1 = baxter_core_msgs.msg.FloatArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.pose.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.value = []
      for i in range(0, length):
        val1 = baxter_core_msgs.msg.FloatArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.value.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rotation = []
      for i in range(0, length):
        val1 = baxter_core_msgs.msg.FloatArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.rotation.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.is_symbol))
      length = len(self.lArmPose)
      buff.write(_struct_I.pack(length))
      for val1 in self.lArmPose:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.data.tostring())
      length = len(self.rArmPose)
      buff.write(_struct_I.pack(length))
      for val1 in self.rArmPose:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.data.tostring())
      length = len(self.lGripper)
      buff.write(_struct_I.pack(length))
      for val1 in self.lGripper:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.data.tostring())
      length = len(self.rGripper)
      buff.write(_struct_I.pack(length))
      for val1 in self.rGripper:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.data.tostring())
      length = len(self.pose)
      buff.write(_struct_I.pack(length))
      for val1 in self.pose:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.data.tostring())
      length = len(self.value)
      buff.write(_struct_I.pack(length))
      for val1 in self.value:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.data.tostring())
      length = len(self.rotation)
      buff.write(_struct_I.pack(length))
      for val1 in self.rotation:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.data.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.lArmPose is None:
        self.lArmPose = None
      if self.rArmPose is None:
        self.rArmPose = None
      if self.lGripper is None:
        self.lGripper = None
      if self.rGripper is None:
        self.rGripper = None
      if self.pose is None:
        self.pose = None
      if self.value is None:
        self.value = None
      if self.rotation is None:
        self.rotation = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      start = end
      end += 1
      (self.is_symbol,) = _struct_B.unpack(str[start:end])
      self.is_symbol = bool(self.is_symbol)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lArmPose = []
      for i in range(0, length):
        val1 = baxter_core_msgs.msg.FloatArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.lArmPose.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rArmPose = []
      for i in range(0, length):
        val1 = baxter_core_msgs.msg.FloatArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.rArmPose.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lGripper = []
      for i in range(0, length):
        val1 = baxter_core_msgs.msg.FloatArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.lGripper.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rGripper = []
      for i in range(0, length):
        val1 = baxter_core_msgs.msg.FloatArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.rGripper.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pose = []
      for i in range(0, length):
        val1 = baxter_core_msgs.msg.FloatArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.pose.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.value = []
      for i in range(0, length):
        val1 = baxter_core_msgs.msg.FloatArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.value.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rotation = []
      for i in range(0, length):
        val1 = baxter_core_msgs.msg.FloatArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.rotation.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
